version: '3.8'

services:
  # Multilingual API Service
  multilingual-api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - VAANI_ENDPOINT=http://vaani-tts:8001
      - INDIGENOUS_NLP_ENDPOINT=http://indigenous-nlp:8002
      - KB_ENDPOINT=http://knowledge-base:8003
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    volumes:
      - ./model:/app/model
      - ./cache:/app/cache
      - ./logs:/app/logs
    depends_on:
      - redis
      - vaani-tts
      - indigenous-nlp
      - knowledge-base
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vaani TTS Service
  vaani-tts:
    image: vaani-tts:latest
    ports:
      - "8001:8001"
    environment:
      - TTS_MODEL_PATH=/app/models/tts
      - AUDIO_CACHE_DIR=/app/cache/audio
      - MAX_AUDIO_LENGTH=300
    volumes:
      - ./audio_cache:/app/cache/audio
      - ./tts_models:/app/models/tts
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Indigenous NLP Service
  indigenous-nlp:
    image: indigenous-nlp:latest
    ports:
      - "8002:8002"
    environment:
      - NLP_MODEL_PATH=/app/models/nlp
      - CACHE_DIR=/app/cache/nlp
      - MAX_TEXT_LENGTH=1000
    volumes:
      - ./nlp_cache:/app/cache/nlp
      - ./nlp_models:/app/models/nlp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Knowledge Base Service
  knowledge-base:
    image: knowledge-base:latest
    ports:
      - "8003:8003"
    environment:
      - KB_DATABASE_URL=postgresql://kb_user:kb_password@postgres:5432/knowledge_base
      - CACHE_TTL=3600
      - MAX_QUERY_LENGTH=500
    volumes:
      - ./kb_data:/app/data
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=knowledge_base
      - POSTGRES_USER=kb_user
      - POSTGRES_PASSWORD=kb_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kb_user -d knowledge_base"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - multilingual-api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Service
  monitoring:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - monitoring
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: multilingual-integration
